package com.gu.pentest

import org.scalatest.concurrent.ScalaFutures
import org.scalatest.time.{Millis, Seconds, Span}
import org.scalatest.{FreeSpec, Matchers, OptionValues}

class AwsTest extends FreeSpec with Matchers with OptionValues with ScalaFutures {
  implicit val defaultPatience =
    PatienceConfig(timeout = Span(5, Seconds), interval = Span(500, Millis))

  "getPenTestDetails" - {
    val instance1 = PenTestInstance("id1", "1.1.1.1", "t2.medium")
    val instance2 = PenTestInstance("id2", "1.1.1.2", "t2.medium")
    val instance3 = PenTestInstance("id3", "1.1.1.3", "t2.medium")

    "returns an empty map if there are no AS groups" in {
      Aws.getPenTestDetails(Nil, Nil) shouldEqual Map.empty
    }

    "works for this example" in {
      val instances = List(instance1, instance2, instance3)
      val asGroups = List(
        PenTestAsGroup("as1", List("id1", "id2")),
        PenTestAsGroup("as2", List("id3"))
      )
      Aws.getPenTestDetails(asGroups, instances) shouldEqual Map(
        "as1" -> List(instance1, instance2),
        "as2" -> List(instance3)
      )
    }

    "does not include AS groups with no instances" in {
      val instances = List(instance1)
      val asGroups = List(
        PenTestAsGroup("as1", List("id1")),
        PenTestAsGroup("as2", List("not-an-instance"))
      )
      val result = Aws.getPenTestDetails(asGroups, instances)
      result should contain key "as1"
      result shouldNot contain key "as2"
    }
  }
}
