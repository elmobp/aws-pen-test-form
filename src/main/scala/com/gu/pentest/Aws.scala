package com.gu.pentest

import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.profile.ProfileCredentialsProvider
import com.amazonaws.regions.Region
import com.amazonaws.services.autoscaling.AmazonAutoScalingAsyncClient
import com.amazonaws.services.autoscaling.model.{DescribeAutoScalingGroupsRequest, DescribeAutoScalingGroupsResult}
import com.amazonaws.services.ec2.AmazonEC2AsyncClient
import com.amazonaws.services.ec2.model.{DescribeInstancesRequest, DescribeInstancesResult}
import com.gu.pentest.util.AwsTools

import scala.collection.JavaConversions._
import scala.concurrent.Future


object Aws {
  def getCredentials(profileName: String): AWSCredentials =
    new ProfileCredentialsProvider(profileName).getCredentials

  // EC2

  def ec2Client(credentials: AWSCredentials, region: Region): AmazonEC2AsyncClient = {
    val client = new AmazonEC2AsyncClient(credentials)
    client.setRegion(region)
    client
  }

  def describeInstances(ec2Client: AmazonEC2AsyncClient, request: DescribeInstancesRequest = new DescribeInstancesRequest()
    ): Future[DescribeInstancesResult] = {
    AwsTools.asFuture(ec2Client.describeInstancesAsync)(request)
  }

  // Autoscaling

  def asClient(credentials: AWSCredentials, region: Region): AmazonAutoScalingAsyncClient = {
    val client = new AmazonAutoScalingAsyncClient(credentials)
    client.setRegion(region)
    client
  }

  def describeAutoScalingGroups(asClient: AmazonAutoScalingAsyncClient, request: DescribeAutoScalingGroupsRequest = new DescribeAutoScalingGroupsRequest): Future[DescribeAutoScalingGroupsResult] = {
    AwsTools.asFuture(asClient.describeAutoScalingGroupsAsync)(request)
  }

  // Tools

  def getInstances(instancesResult: DescribeInstancesResult): List[PenTestInstance] = {
    instancesResult.getReservations.toList.flatMap { reservation =>
      reservation.getInstances.toList.flatMap { instance =>
        for {
          id <- Option(instance.getInstanceId)
          ip <- Option(instance.getPublicIpAddress)
          instanceType <- Option(instance.getInstanceType)
        } yield PenTestInstance(id, ip, instanceType)
      }
    }
  }

  def getAsGroups(asGroupsResult: DescribeAutoScalingGroupsResult): List[PenTestAsGroup] = {
    asGroupsResult.getAutoScalingGroups.toList.map { asGroup =>
      val name = asGroup.getAutoScalingGroupName
      val instanceIds = asGroup.getInstances.toList.map(_.getInstanceId)
      PenTestAsGroup(name, instanceIds)
    }
  }

  def getPenTestDetails(asGroups: List[PenTestAsGroup], instances: List[PenTestInstance]): Map[String, List[PenTestInstance]] = {
    val asGroupsMap = asGroups.map { asGroup =>
      asGroup.name -> asGroup.instanceIds.flatMap(instanceId => instances.filter(filterInstance).find(_.id == instanceId))
    }.toMap
    asGroupsMap.filter(_._2.nonEmpty)
  }

  def filterInstance(instance: PenTestInstance): Boolean =
    !Set("t1.micro", "m1.small").contains(instance.instanceType)
}
