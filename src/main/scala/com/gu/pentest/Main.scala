package com.gu.pentest

import com.amazonaws.regions.{Region, Regions}
import scopt.OptionParser

import scala.concurrent.ExecutionContext.Implicits.global


object Main {
  def main(args: Array[String]): Unit = {
    argParser.parse(args, Arguments()) match {
      case Some(Arguments(profile, region)) =>
        val credentials = Aws.getCredentials(profile)
        val ec2Client = Aws.ec2Client(credentials, region)
        val asClient = Aws.asClient(credentials, region)

        // kick AWS requests off in parallel
        val fInstancesResult = Aws.describeInstances(ec2Client)
        val fasGroupsResult = Aws.describeAutoScalingGroups(asClient)

        for {
          instancesResult <- fInstancesResult
          asGroupsResult <- fasGroupsResult
          instances = Aws.getInstances(instancesResult)
          asGroups = Aws.getAsGroups(asGroupsResult)
          details = Aws.getPenTestDetails(asGroups, instances)
          output = Output.detailsAsString(details)
        } {
          println(output)
          System.exit(0)
        }

      case _ =>
        // parsing cmd line args failed, help message will be displayed
        System.exit(1)
    }
  }

  val argParser = new OptionParser[Arguments]("pen-test-form") {
    arg[String]("profile") action { (profile, arguments) =>
      arguments.copy(profile = profile)
    } text "AWS account profile name"
    arg[String]("region") optional() validate { region =>
      try {
        Region.getRegion(Regions.fromName(region))
        success
      } catch {
        case e: IllegalArgumentException =>
          failure(s"Invalid AWS region name, $region")
      }
    } action { (region, arguments) =>
      arguments.copy(region = Region.getRegion(Regions.fromName(region)))
    } text "AWS region name (defaults to eu-west-1)"
  }
}
