package com.gu.pentest

import org.joda.time.DateTime
import org.joda.time.format.DateTimeFormat

object Output {
  def warningsAsString(details: Map[PenTestAsGroup, List[PenTestInstance]]): String = {
    val asGroupsText = details.toList.map { case (asGroup, instances) =>
      s"""AutoScaling Group:
         |${asGroup.name}
         |Instances:
         |${instances.map(instanceWarning).mkString("\n")}
       """.stripMargin
    } mkString "\n\n"

    s"""Some AutoScaling groups contain instances that are not eligible for pen testing.
       |AWS does not allow pen-testing on the following instance types:
       |${Aws.ineligbleInstanceTypes.mkString(", ")}
       |
       |You should either temporarily change these instances to allowed instance types
       |or be aware that these will be out-of-scope for the pen-test.
       |
       |$asGroupsText
     """.stripMargin
  }

  private def instanceWarning(instance: PenTestInstance): String = {
    s"${instance.id} of type ${instance.instanceType}"
  }

  def detailsAsString(details: Map[String, List[PenTestInstance]]): String = {
    val instanceIps = details.values.flatten.map(_.ip).mkString("\n")
    val instanceIds = details.values.flatten.map(_.id).mkString("\n")

    val comments = details.map { case (asGroup, instances) =>
      val asInstances = instances.map(i => s"${i.id}\t${i.ip} (${i.instanceType})").mkString("\n")
      s"$asGroup\n$asInstances"
    } mkString "\n\n"

    val future = DateTime.now().plusDays(90)
    val format = DateTimeFormat.forPattern("yyyy-MM-dd")

    s"""Instance IDs:
       |$instanceIds
       |
       |Instance IPs:
       |$instanceIps
       |
       |Comments:
       |Here are full details of the AS groups and current instances.
       |The actual instances will change during routine scaling and deployments.
       |
       |$comments
       |
       |End date:
       |${format.print(future)} 00:00
     """.stripMargin
  }
}
